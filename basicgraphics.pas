UNIT basicGraphics;

{$mode objfpc}{$H+}

INTERFACE
USES ExtCtrls,Classes,myGenerics;
CONST UPPER_BLACK_LEVEL=0.0000029263403116397158;
      UPPER_C1_LEVEL   =0.00002633706280475744;
TYPE
  T_rgbColor=array[0..2] of byte;
  P_rgbPicture=^T_rgbPicture;

  T_rgbPicture=object
    private
      followedBy:P_rgbPicture;
      Pixels:PSmallInt;
    public
      mass:double;
      PROCEDURE setPixel(CONST x,y:longint; CONST m:double);

      CONSTRUCTOR create;
      DESTRUCTOR destroy;

      PROCEDURE copyToImage(VAR destImage:TImage);

      FUNCTION load(fileStream:TFileStream; CONST previous:P_rgbPicture):boolean;
      PROCEDURE write(fileStream:TFileStream; CONST previous:P_rgbPicture);
  end;

  P_animation=^T_animation;
  T_animation=object
    private
      section:TRTLCriticalSection;
      firstFrame,lastFrame:P_rgbPicture;
      frameCount:longint;
    public
      CONSTRUCTOR create;
      DESTRUCTOR destroy;
      FUNCTION render(VAR destImage:TImage):boolean;
      FUNCTION dropFrame:longint;
      FUNCTION addFrame(CONST frame:P_rgbPicture):longint;
      PROPERTY getFrameCount:longint read frameCount;
  end;
IMPLEMENTATION
USES sysutils,Graphics, IntfGraphics, GraphType, math;
{ T_animation }

CONSTRUCTOR T_animation.create;
  begin
    initCriticalSection(section);
    frameCount:=0;
    firstFrame:=nil;
    lastFrame:=nil;
  end;

DESTRUCTOR T_animation.destroy;
  begin
    enterCriticalSection(section);
    while frameCount>0 do dropFrame;
    leaveCriticalSection(section);
    doneCriticalSection(section);
  end;

FUNCTION T_animation.render(VAR destImage: TImage): boolean;
  begin
    if (frameCount>0) and (firstFrame<>nil) then begin
      firstFrame^.copyToImage(destImage);
      result:=true;
    end else result:=false;
  end;

FUNCTION T_animation.dropFrame: longint;
  VAR dropped:P_rgbPicture=nil;
  begin
    enterCriticalSection(section);
    if (frameCount>0) and (firstFrame<>nil) then begin
      dropped:=firstFrame;
      firstFrame:=firstFrame^.followedBy;
      dec(frameCount);
    end;
    result:=frameCount;
    leaveCriticalSection(section);
    if dropped<>nil then dispose(dropped,destroy);
  end;

FUNCTION T_animation.addFrame(CONST frame: P_rgbPicture): longint;
  begin
    enterCriticalSection(section);
    if firstFrame=nil then begin
      firstFrame:=frame;
      frameCount:=0;
    end else
      lastFrame^.followedBy:=frame;
    lastFrame:=frame;
    inc(frameCount);
    result:=frameCount;
    leaveCriticalSection(section);
  end;

{ T_rgbPicture }

PROCEDURE T_rgbPicture.setPixel(CONST x,y:longint; CONST m:double);
  begin
    if isNan(m) or (m>12.25)
    then             Pixels[x+y*SYS_SIZE]:=1023
    else if m<0 then Pixels[x+y*SYS_SIZE]:=   0
    else begin
      Pixels[x+y*SYS_SIZE]:=round(sqrt(m)*292.28571428571428);
      mass+=m;
    end;
  end;

CONSTRUCTOR T_rgbPicture.create;
  begin
    followedBy:=nil;
    getMem(Pixels,sizeOf(SmallInt)*SYS_SIZE*SYS_SIZE);
  end;

DESTRUCTOR T_rgbPicture.destroy;
  begin
    freeMem(Pixels,sizeOf(SmallInt)*SYS_SIZE*SYS_SIZE);
  end;

PROCEDURE T_rgbPicture.copyToImage(VAR destImage: TImage);
  CONST COLOR_TABLE: array[0..1023] of T_rgbColor=(
  (  0,  0,  0),(  0,  0,  0),(  0,  0,  1),(  0,  0,  2),(  0,  0,  3),(  0,  0,  4),(  0,  0,  5),(  0,  0,  6),(  0,  0,  6),(  0,  0,  7),(  0,  0,  8),(  0,  0,  9),(  0,  0, 10),(  0,  0, 11),(  0,  0, 12),(  0,  0, 13),
  (  0,  0, 13),(  0,  0, 14),(  0,  0, 15),(  0,  0, 16),(  0,  0, 17),(  0,  0, 18),(  0,  0, 19),(  0,  0, 20),(  0,  0, 20),(  0,  0, 21),(  0,  0, 22),(  0,  0, 23),(  0,  0, 24),(  0,  0, 25),(  0,  0, 26),(  0,  0, 27),
  (  0,  0, 27),(  0,  0, 28),(  0,  0, 29),(  0,  0, 30),(  0,  0, 31),(  0,  0, 32),(  0,  0, 33),(  0,  0, 34),(  0,  0, 34),(  0,  0, 35),(  0,  0, 36),(  0,  0, 37),(  0,  0, 38),(  0,  0, 39),(  0,  0, 40),(  0,  0, 41),
  (  0,  0, 41),(  0,  0, 42),(  0,  0, 43),(  0,  0, 44),(  0,  0, 45),(  0,  0, 46),(  0,  0, 47),(  0,  0, 47),(  0,  0, 48),(  0,  0, 49),(  0,  0, 50),(  0,  0, 51),(  0,  0, 52),(  0,  0, 53),(  0,  0, 54),(  0,  0, 54),
  (  0,  0, 55),(  0,  0, 56),(  0,  0, 57),(  0,  0, 58),(  0,  0, 59),(  0,  0, 60),(  0,  0, 61),(  0,  0, 61),(  0,  0, 62),(  0,  0, 63),(  0,  0, 64),(  0,  0, 65),(  0,  0, 66),(  0,  0, 67),(  0,  0, 68),(  0,  0, 68),
  (  0,  0, 69),(  0,  0, 70),(  0,  0, 71),(  0,  0, 72),(  0,  0, 73),(  0,  0, 74),(  0,  0, 75),(  0,  0, 75),(  0,  0, 76),(  0,  0, 77),(  0,  0, 78),(  0,  0, 79),(  0,  0, 80),(  0,  0, 81),(  0,  0, 82),(  0,  0, 82),
  (  0,  0, 83),(  0,  0, 84),(  0,  0, 85),(  0,  0, 86),(  0,  0, 87),(  0,  0, 88),(  0,  0, 88),(  0,  0, 89),(  0,  0, 90),(  0,  0, 91),(  0,  0, 92),(  0,  0, 93),(  0,  0, 94),(  0,  0, 95),(  0,  0, 95),(  0,  0, 96),
  (  0,  0, 97),(  0,  0, 98),(  0,  0, 99),(  0,  0,100),(  0,  0,101),(  0,  0,102),(  0,  0,102),(  0,  0,103),(  0,  0,104),(  0,  0,105),(  0,  0,106),(  0,  0,107),(  0,  0,108),(  0,  0,109),(  0,  0,109),(  0,  0,110),
  (  0,  0,111),(  0,  0,112),(  0,  0,113),(  0,  0,114),(  0,  0,115),(  0,  0,116),(  0,  0,116),(  0,  0,117),(  0,  0,118),(  0,  0,119),(  0,  0,120),(  0,  0,121),(  0,  0,122),(  0,  0,123),(  0,  0,123),(  0,  0,124),
  (  0,  0,125),(  0,  0,126),(  0,  0,127),(  0,  0,126),(  1,  0,125),(  2,  0,125),(  3,  0,124),(  4,  0,123),(  5,  0,122),(  5,  0,121),(  6,  0,120),(  7,  0,119),(  8,  0,118),(  9,  0,118),( 10,  0,117),( 11,  0,116),
  ( 12,  0,115),( 12,  0,114),( 13,  0,113),( 14,  0,112),( 15,  0,111),( 16,  0,111),( 17,  0,110),( 18,  0,109),( 19,  0,108),( 19,  0,107),( 20,  0,106),( 21,  0,105),( 22,  0,104),( 23,  0,104),( 24,  0,103),( 25,  0,102),
  ( 26,  0,101),( 26,  0,100),( 27,  0, 99),( 28,  0, 98),( 29,  0, 97),( 30,  0, 97),( 31,  0, 96),( 32,  0, 95),( 33,  0, 94),( 33,  0, 93),( 34,  0, 92),( 35,  0, 91),( 36,  0, 90),( 37,  0, 90),( 38,  0, 89),( 39,  0, 88),
  ( 40,  0, 87),( 40,  0, 86),( 41,  0, 85),( 42,  0, 84),( 43,  0, 84),( 44,  0, 83),( 45,  0, 82),( 46,  0, 81),( 46,  0, 80),( 47,  0, 79),( 48,  0, 78),( 49,  0, 77),( 50,  0, 77),( 51,  0, 76),( 52,  0, 75),( 53,  0, 74),
  ( 53,  0, 73),( 54,  0, 72),( 55,  0, 71),( 56,  0, 70),( 57,  0, 70),( 58,  0, 69),( 59,  0, 68),( 60,  0, 67),( 60,  0, 66),( 61,  0, 65),( 62,  0, 64),( 63,  0, 63),( 64,  0, 63),( 65,  0, 62),( 66,  0, 61),( 67,  0, 60),
  ( 67,  0, 59),( 68,  0, 58),( 69,  0, 57),( 70,  0, 56),( 71,  0, 56),( 72,  0, 55),( 73,  0, 54),( 74,  0, 53),( 74,  0, 52),( 75,  0, 51),( 76,  0, 50),( 77,  0, 49),( 78,  0, 49),( 79,  0, 48),( 80,  0, 47),( 81,  0, 46),
  ( 81,  0, 45),( 82,  0, 44),( 83,  0, 43),( 84,  0, 42),( 85,  0, 42),( 86,  0, 41),( 87,  0, 40),( 87,  0, 39),( 88,  0, 38),( 89,  0, 37),( 90,  0, 36),( 91,  0, 36),( 92,  0, 35),( 93,  0, 34),( 94,  0, 33),( 94,  0, 32),
  ( 95,  0, 31),( 96,  0, 30),( 97,  0, 29),( 98,  0, 29),( 99,  0, 28),(100,  0, 27),(101,  0, 26),(101,  0, 25),(102,  0, 24),(103,  0, 23),(104,  0, 22),(105,  0, 22),(106,  0, 21),(107,  0, 20),(108,  0, 19),(108,  0, 18),
  (109,  0, 17),(110,  0, 16),(111,  0, 15),(112,  0, 15),(113,  0, 14),(114,  0, 13),(115,  0, 12),(115,  0, 11),(116,  0, 10),(117,  0,  9),(118,  0,  8),(119,  0,  8),(120,  0,  7),(121,  0,  6),(122,  0,  5),(122,  0,  4),
  (123,  0,  3),(124,  0,  2),(125,  0,  1),(126,  0,  1),(127,  0,  0),(128,  0,  0),(128,  0,  0),(129,  0,  0),(130,  0,  0),(131,  0,  0),(132,  0,  0),(133,  0,  0),(134,  0,  0),(135,  0,  0),(135,  0,  0),(136,  0,  0),
  (137,  0,  0),(138,  0,  0),(139,  0,  0),(140,  0,  0),(141,  0,  0),(142,  0,  0),(142,  0,  0),(143,  0,  0),(144,  0,  0),(145,  0,  0),(146,  0,  0),(147,  0,  0),(148,  0,  0),(149,  0,  0),(149,  0,  0),(150,  0,  0),
  (151,  0,  0),(152,  0,  0),(153,  0,  0),(154,  0,  0),(155,  0,  0),(156,  0,  0),(156,  0,  0),(157,  0,  0),(158,  0,  0),(159,  0,  0),(160,  0,  0),(161,  0,  0),(162,  0,  0),(163,  0,  0),(163,  0,  0),(164,  0,  0),
  (165,  0,  0),(166,  0,  0),(167,  0,  0),(168,  0,  0),(169,  0,  0),(169,  0,  0),(170,  0,  0),(171,  0,  0),(172,  0,  0),(173,  0,  0),(174,  0,  0),(175,  0,  0),(176,  0,  0),(176,  0,  0),(177,  0,  0),(178,  0,  0),
  (179,  0,  0),(180,  0,  0),(181,  0,  0),(182,  0,  0),(183,  0,  0),(183,  0,  0),(184,  0,  0),(185,  0,  0),(186,  0,  0),(187,  0,  0),(188,  0,  0),(189,  0,  0),(190,  0,  0),(190,  0,  0),(191,  0,  0),(192,  0,  0),
  (193,  0,  0),(194,  0,  0),(195,  0,  0),(196,  0,  0),(197,  0,  0),(197,  0,  0),(198,  0,  0),(199,  0,  0),(200,  0,  0),(201,  0,  0),(202,  0,  0),(203,  0,  0),(204,  0,  0),(204,  0,  0),(205,  0,  0),(206,  0,  0),
  (207,  0,  0),(208,  0,  0),(209,  0,  0),(210,  0,  0),(211,  0,  0),(211,  0,  0),(212,  0,  0),(213,  0,  0),(214,  0,  0),(215,  0,  0),(216,  0,  0),(217,  0,  0),(217,  0,  0),(218,  0,  0),(219,  0,  0),(220,  0,  0),
  (221,  0,  0),(222,  0,  0),(223,  0,  0),(224,  0,  0),(224,  0,  0),(225,  0,  0),(226,  0,  0),(227,  0,  0),(228,  0,  0),(229,  0,  0),(230,  0,  0),(231,  0,  0),(231,  0,  0),(232,  0,  0),(233,  0,  0),(234,  0,  0),
  (235,  0,  0),(236,  0,  0),(237,  0,  0),(238,  0,  0),(238,  0,  0),(239,  0,  0),(240,  0,  0),(241,  0,  0),(242,  0,  0),(243,  0,  0),(244,  0,  0),(245,  0,  0),(245,  0,  0),(246,  0,  0),(247,  0,  0),(248,  0,  0),
  (249,  0,  0),(250,  0,  0),(251,  0,  0),(252,  0,  0),(252,  0,  0),(253,  0,  0),(254,  0,  0),(255,  0,  0),(255,  1,  0),(255,  2,  0),(255,  3,  0),(255,  3,  0),(255,  4,  0),(255,  5,  0),(255,  6,  0),(255,  7,  0),
  (255,  8,  0),(255,  9,  0),(255, 10,  0),(255, 10,  0),(255, 11,  0),(255, 12,  0),(255, 13,  0),(255, 14,  0),(255, 15,  0),(255, 16,  0),(255, 17,  0),(255, 17,  0),(255, 18,  0),(255, 19,  0),(255, 20,  0),(255, 21,  0),
  (255, 22,  0),(255, 23,  0),(255, 24,  0),(255, 24,  0),(255, 25,  0),(255, 26,  0),(255, 27,  0),(255, 28,  0),(255, 29,  0),(255, 30,  0),(255, 31,  0),(255, 31,  0),(255, 32,  0),(255, 33,  0),(255, 34,  0),(255, 35,  0),
  (255, 36,  0),(255, 37,  0),(255, 38,  0),(255, 38,  0),(255, 39,  0),(255, 40,  0),(255, 41,  0),(255, 42,  0),(255, 43,  0),(255, 44,  0),(255, 44,  0),(255, 45,  0),(255, 46,  0),(255, 47,  0),(255, 48,  0),(255, 49,  0),
  (255, 50,  0),(255, 51,  0),(255, 51,  0),(255, 52,  0),(255, 53,  0),(255, 54,  0),(255, 55,  0),(255, 56,  0),(255, 57,  0),(255, 58,  0),(255, 58,  0),(255, 59,  0),(255, 60,  0),(255, 61,  0),(255, 62,  0),(255, 63,  0),
  (255, 64,  0),(255, 65,  0),(255, 65,  0),(255, 66,  0),(255, 67,  0),(255, 68,  0),(255, 69,  0),(255, 70,  0),(255, 71,  0),(255, 72,  0),(255, 72,  0),(255, 73,  0),(255, 74,  0),(255, 75,  0),(255, 76,  0),(255, 77,  0),
  (255, 78,  0),(255, 79,  0),(255, 79,  0),(255, 80,  0),(255, 81,  0),(255, 82,  0),(255, 83,  0),(255, 84,  0),(255, 85,  0),(255, 85,  0),(255, 86,  0),(255, 87,  0),(255, 88,  0),(255, 89,  0),(255, 90,  0),(255, 91,  0),
  (255, 92,  0),(255, 92,  0),(255, 93,  0),(255, 94,  0),(255, 95,  0),(255, 96,  0),(255, 97,  0),(255, 98,  0),(255, 99,  0),(255, 99,  0),(255,100,  0),(255,101,  0),(255,102,  0),(255,103,  0),(255,104,  0),(255,105,  0),
  (255,106,  0),(255,106,  0),(255,107,  0),(255,108,  0),(255,109,  0),(255,110,  0),(255,111,  0),(255,112,  0),(255,113,  0),(255,113,  0),(255,114,  0),(255,115,  0),(255,116,  0),(255,117,  0),(255,118,  0),(255,119,  0),
  (255,120,  0),(255,120,  0),(255,121,  0),(255,122,  0),(255,123,  0),(255,124,  0),(255,125,  0),(255,126,  0),(255,127,  0),(255,127,  0),(255,128,  0),(255,129,  0),(255,130,  0),(255,131,  0),(255,132,  0),(255,133,  0),
  (255,133,  0),(255,134,  0),(255,135,  0),(255,136,  0),(255,137,  0),(255,138,  0),(255,139,  0),(255,140,  0),(255,140,  0),(255,141,  0),(255,142,  0),(255,143,  0),(255,144,  0),(255,145,  0),(255,146,  0),(255,147,  0),
  (255,147,  0),(255,148,  0),(255,149,  0),(255,150,  0),(255,151,  0),(255,152,  0),(255,153,  0),(255,154,  0),(255,154,  0),(255,155,  0),(255,156,  0),(255,157,  0),(255,158,  0),(255,159,  0),(255,160,  0),(255,161,  0),
  (255,161,  0),(255,162,  0),(255,163,  0),(255,164,  0),(255,165,  0),(255,166,  0),(255,167,  0),(255,168,  0),(255,168,  0),(255,169,  0),(255,170,  0),(255,171,  0),(255,172,  0),(255,173,  0),(255,174,  0),(255,174,  0),
  (255,175,  0),(255,176,  0),(255,177,  0),(255,178,  0),(255,179,  0),(255,180,  0),(255,181,  0),(255,181,  0),(255,182,  0),(255,183,  0),(255,184,  0),(255,185,  0),(255,186,  0),(255,187,  0),(255,188,  0),(255,188,  0),
  (255,189,  0),(255,190,  0),(255,191,  0),(255,192,  0),(255,193,  0),(255,194,  0),(255,195,  0),(255,195,  0),(255,196,  0),(255,197,  0),(255,198,  0),(255,199,  0),(255,200,  0),(255,201,  0),(255,202,  0),(255,202,  0),
  (255,203,  0),(255,204,  0),(255,205,  0),(255,206,  0),(255,207,  0),(255,208,  0),(255,209,  0),(255,209,  0),(255,210,  0),(255,211,  0),(255,212,  0),(255,213,  0),(255,214,  0),(255,215,  0),(255,215,  0),(255,216,  0),
  (255,217,  0),(255,218,  0),(255,219,  0),(255,220,  0),(255,221,  0),(255,222,  0),(255,222,  0),(255,223,  0),(255,224,  0),(255,225,  0),(255,226,  0),(255,227,  0),(255,228,  0),(255,229,  0),(255,229,  0),(255,230,  0),
  (255,231,  0),(255,232,  0),(255,233,  0),(255,234,  0),(255,235,  0),(255,236,  0),(255,236,  0),(255,237,  0),(255,238,  0),(255,239,  0),(255,240,  0),(255,241,  0),(255,242,  0),(255,243,  0),(255,243,  0),(255,244,  0),
  (255,245,  0),(255,246,  0),(255,247,  0),(255,248,  0),(255,249,  0),(255,250,  0),(255,250,  0),(255,251,  0),(255,252,  0),(255,253,  0),(255,254,  0),(255,255,  0),(255,255,  1),(255,255,  1),(255,255,  2),(255,255,  3),
  (255,255,  4),(255,255,  5),(255,255,  6),(255,255,  7),(255,255,  8),(255,255,  8),(255,255,  9),(255,255, 10),(255,255, 11),(255,255, 12),(255,255, 13),(255,255, 14),(255,255, 15),(255,255, 15),(255,255, 16),(255,255, 17),
  (255,255, 18),(255,255, 19),(255,255, 20),(255,255, 21),(255,255, 22),(255,255, 22),(255,255, 23),(255,255, 24),(255,255, 25),(255,255, 26),(255,255, 27),(255,255, 28),(255,255, 29),(255,255, 29),(255,255, 30),(255,255, 31),
  (255,255, 32),(255,255, 33),(255,255, 34),(255,255, 35),(255,255, 36),(255,255, 36),(255,255, 37),(255,255, 38),(255,255, 39),(255,255, 40),(255,255, 41),(255,255, 42),(255,255, 42),(255,255, 43),(255,255, 44),(255,255, 45),
  (255,255, 46),(255,255, 47),(255,255, 48),(255,255, 49),(255,255, 49),(255,255, 50),(255,255, 51),(255,255, 52),(255,255, 53),(255,255, 54),(255,255, 55),(255,255, 56),(255,255, 56),(255,255, 57),(255,255, 58),(255,255, 59),
  (255,255, 60),(255,255, 61),(255,255, 62),(255,255, 63),(255,255, 63),(255,255, 64),(255,255, 65),(255,255, 66),(255,255, 67),(255,255, 68),(255,255, 69),(255,255, 70),(255,255, 70),(255,255, 71),(255,255, 72),(255,255, 73),
  (255,255, 74),(255,255, 75),(255,255, 76),(255,255, 77),(255,255, 77),(255,255, 78),(255,255, 79),(255,255, 80),(255,255, 81),(255,255, 82),(255,255, 83),(255,255, 84),(255,255, 84),(255,255, 85),(255,255, 86),(255,255, 87),
  (255,255, 88),(255,255, 89),(255,255, 90),(255,255, 90),(255,255, 91),(255,255, 92),(255,255, 93),(255,255, 94),(255,255, 95),(255,255, 96),(255,255, 97),(255,255, 97),(255,255, 98),(255,255, 99),(255,255,100),(255,255,101),
  (255,255,102),(255,255,103),(255,255,104),(255,255,104),(255,255,105),(255,255,106),(255,255,107),(255,255,108),(255,255,109),(255,255,110),(255,255,111),(255,255,111),(255,255,112),(255,255,113),(255,255,114),(255,255,115),
  (255,255,116),(255,255,117),(255,255,118),(255,255,118),(255,255,119),(255,255,120),(255,255,121),(255,255,122),(255,255,123),(255,255,124),(255,255,125),(255,255,125),(255,255,126),(255,255,127),(255,255,128),(255,255,129),
  (255,255,130),(255,255,131),(255,255,131),(255,255,132),(255,255,133),(255,255,134),(255,255,135),(255,255,136),(255,255,137),(255,255,138),(255,255,138),(255,255,139),(255,255,140),(255,255,141),(255,255,142),(255,255,143),
  (255,255,144),(255,255,145),(255,255,145),(255,255,146),(255,255,147),(255,255,148),(255,255,149),(255,255,150),(255,255,151),(255,255,152),(255,255,152),(255,255,153),(255,255,154),(255,255,155),(255,255,156),(255,255,157),
  (255,255,158),(255,255,159),(255,255,159),(255,255,160),(255,255,161),(255,255,162),(255,255,163),(255,255,164),(255,255,165),(255,255,166),(255,255,166),(255,255,167),(255,255,168),(255,255,169),(255,255,170),(255,255,171),
  (255,255,172),(255,255,172),(255,255,173),(255,255,174),(255,255,175),(255,255,176),(255,255,177),(255,255,178),(255,255,179),(255,255,179),(255,255,180),(255,255,181),(255,255,182),(255,255,183),(255,255,184),(255,255,185),
  (255,255,186),(255,255,186),(255,255,187),(255,255,188),(255,255,189),(255,255,190),(255,255,191),(255,255,192),(255,255,193),(255,255,193),(255,255,194),(255,255,195),(255,255,196),(255,255,197),(255,255,198),(255,255,199),
  (255,255,200),(255,255,200),(255,255,201),(255,255,202),(255,255,203),(255,255,204),(255,255,205),(255,255,206),(255,255,207),(255,255,207),(255,255,208),(255,255,209),(255,255,210),(255,255,211),(255,255,212),(255,255,213),
  (255,255,213),(255,255,214),(255,255,215),(255,255,216),(255,255,217),(255,255,218),(255,255,219),(255,255,220),(255,255,220),(255,255,221),(255,255,222),(255,255,223),(255,255,224),(255,255,225),(255,255,226),(255,255,227),
  (255,255,227),(255,255,228),(255,255,229),(255,255,230),(255,255,231),(255,255,232),(255,255,233),(255,255,234),(255,255,234),(255,255,235),(255,255,236),(255,255,237),(255,255,238),(255,255,239),(255,255,240),(255,255,241),
  (255,255,241),(255,255,242),(255,255,243),(255,255,244),(255,255,245),(255,255,246),(255,255,247),(255,255,248),(255,255,248),(255,255,249),(255,255,250),(255,255,251),(255,255,252),(255,255,253),(255,255,254),(255,255,255));

  VAR ScanLineImage,                 //image with representation as in T_24BitImage
      tempIntfImage: TLazIntfImage;  //image with representation as in TBitmap
      ImgFormatDescription: TRawImageDescription;
      y,x:longint;
      pix:PByte;
      src:PSmallInt;

      colLine:array[0..SYS_SIZE-1] of T_rgbColor;

  begin
    ScanLineImage:=TLazIntfImage.create(SYS_SIZE,SYS_SIZE);
    try
      ImgFormatDescription.Init_BPP24_B8G8R8_BIO_TTB(SYS_SIZE,SYS_SIZE);
      ImgFormatDescription.ByteOrder:=riboMSBFirst;
      ScanLineImage.DataDescription:=ImgFormatDescription;
      for y:=0 to SYS_SIZE-1 do begin
        src:=Pixels+y*SYS_SIZE;
        for x:=0 to SYS_SIZE-1 do colLine[x]:=COLOR_TABLE[src[x]];
        pix:=ScanLineImage.GetDataLineStart(y);
        move(colLine,pix^,sizeOf(T_rgbColor)*SYS_SIZE);
      end;
      destImage.picture.Bitmap.setSize(SYS_SIZE,SYS_SIZE);
      tempIntfImage:=destImage.picture.Bitmap.CreateIntfImage;
      tempIntfImage.CopyPixels(ScanLineImage);
      destImage.picture.Bitmap.LoadFromIntfImage(tempIntfImage);
      tempIntfImage.free;
    finally
      ScanLineImage.free;
    end;
  end;

FUNCTION T_rgbPicture.load(fileStream: TFileStream; CONST previous:P_rgbPicture): boolean;
  VAR expected,read,p:longint;
      i:longint;
  begin
    p:=fileStream.position;
    expected:=sizeOf(SmallInt)*SYS_SIZE*SYS_SIZE;
    read:=fileStream.read(Pixels^,expected);
    if previous<>nil then for i:=0 to SYS_SIZE*SYS_SIZE-1 do Pixels[i]+=previous^.Pixels[i];
    if expected=read then begin p+=read; fileStream.Seek(p,soBeginning); end else exit(false);

    expected:=sizeOf(mass);
    read:=fileStream.read(mass,sizeOf(mass));
    if expected=read then begin p+=read; fileStream.Seek(p,soBeginning); result:=true; end else exit(false);
  end;

PROCEDURE T_rgbPicture.write(fileStream: TFileStream; CONST previous:P_rgbPicture);
  var i: longint;
      dataToWrite:array[0..SYS_SIZE*SYS_SIZE-1] of SmallInt;
  begin
    if previous=nil then fileStream.write(Pixels^,sizeOf(SmallInt)*SYS_SIZE*SYS_SIZE)
    else begin
      for i:=0 to SYS_SIZE*SYS_SIZE-1 do dataToWrite[i]:=pixels[i]-previous^.Pixels[i];
      fileStream.write(dataToWrite,sizeOf(SmallInt)*SYS_SIZE*SYS_SIZE)
    end;
    fileStream.write(mass,sizeOf(mass));
  end;

end.

