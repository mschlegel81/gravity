USE startall;


main->begin
  deleteDir('backup');
  deleteDir('lib');
  files(['*.anim','*.log','*.exe','*.dump']).map(::deleteFile);

  local blocked:=runningGravTasks.map((n)->n.changeFileExt('')).relativeFileName.toSet;
  local unblockedFilter:=(f)->f.changeFileExt('').expandedFileName.relativeFileName not in blocked;

  local existing   :=allFiles('.','grav*.txt').union(allFiles('.','grav*.log'));
  local freedBytes:=0;
  local freedCount:=0;
  existing
  .sort
  .filter(unblockedFilter)
  .map((f)->[f,f.fileInfo['size']])
  .agg((f)->log('Deleting ',f[0],deleteFile(f[0]) ? begin freedCount+=1; freedBytes+=f[1]; ' o.k.'; end : ' FAILED'));

  existing   :=union(allFiles('.','*.anim'),
                     allFiles('.','*.dump'),
                     allFiles('.','*.exe' )).filter((f)->f.changeFileExt('').relativeFileName not in blocked);
  local root:=expandedFileName('.');
  existing.map((f)->f.changeFileExt('.mnh').expandedFileName.systemSpecificFilename)
          .unique
          .filter(::fileExists)
          .each(f,changeDirectory(f.extractFileDirectory),
                  exec(executor,[f,'check']));
  changeDirectory(root);

  local
  recreatable:=intersect(allFiles('.','*.mnh').map((s)->s.changeFileExt('')),
                         allFiles('.','*.dat').map((s)->s.changeFileExt('')));
  existing
  .sort
  .filter((f)->f.changeFileExt('') in recreatable)
  .filter(unblockedFilter)
  .map((f)->[f,f.fileInfo['size']])
  .agg((f)->log('Deleting ',f[0],deleteFile(f[0]) ? begin freedCount+=1; freedBytes+=f[1]; ' o.k.'; end : ' FAILED'));

  log( floor(freedBytes      ),"\tbytes in ",freedCount,' files freed',
  "\n",floor(freedBytes/1024 ),"\tkB",
  "\n",floor(freedBytes/1024²),"\tMB",
  "\n",floor(freedBytes/1024³),"\tGB");
end;
