main->begin
  local recreatable:=intersect(
                     allFiles('.','*.anim').map((s)->s.changeFileExt('')),
                     allFiles('.','*.dump').map((s)->s.changeFileExt('')),
                     allFiles('.','*.exe' ).map((s)->s.changeFileExt('')));
  local existing   :=allFiles('.','*.txt').union(allFiles('.','*.log'));
  local freedBytes:=0;
  local freedCount:=0;
  existing
  .sort
  .filter((f)->f.changeFileExt('') in recreatable)
  .map((f)->[f,f.fileInfo['size']])
  .agg((f)->log('Deleting ',f[0],deleteFile(f[0]) ? begin freedCount+=1; freedBytes+=f[1]; ' o.k.'; end : ' FAILED'));

  existing   :=union(allFiles('.','*.anim'),
                     allFiles('.','*.dump'),
                     allFiles('.','*.exe' ));
  recreatable:=intersect(
               allFiles('.','*.mnh').map((s)->s.changeFileExt('')),
               allFiles('.','*.datastore0').map((s)->s.changeFileExt('')));
  existing
  .sort
  .filter((f)->f.changeFileExt('') in recreatable)
  .map((f)->[f,f.fileInfo['size']])
  .agg((f)->log('Deleting ',f[0],deleteFile(f[0]) ? begin freedCount+=1; freedBytes+=f[1]; ' o.k.'; end : ' FAILED'));


  log(floor(freedBytes),'bytes in ',freedCount,' files freed');
  log(floor(freedBytes/1024),'kB in ',freedCount,' files freed');
  log(floor(freedBytes/1024²),'MB in ',freedCount,' files freed');
  log(floor(freedBytes/1024²),'GB in ',freedCount,' files freed');
end;
