USE startall;

census->begin
  local info:=allFiles('.').fileInfo;
  [info.size,info.getInner('size').agg(+)];
end;

getListingToDelete(includeExe:Boolean)->begin
  changeDirectory(myPath.extractFileExt);
  local blocked:=runningGravTasks.map((n)->n.changeFileExt('')).relativeFileName.toSet;
  local unblockedFilter:=(f)->f.changeFileExt('').expandedFileName.relativeFileName not in blocked;
  union(allFiles('backup','*.*'),
        allFiles('lib','*.*'),
        files(['*.replay','*.anim','*.log','*.exe','*.dump']),
        allFiles('.','grav*.log'),
        allFiles('.','grav*.anim').intersect(allFiles('.','grav*.replay').changeFileExt('.anim')),
        includeExe ? allFiles('.','grav*.exe').minus(allFiles('.','grav*.dump').changeFileExt('.exe')) : void)  .filter(unblockedFilter);
end.sort;

cleanup(includeExe:Boolean)->begin
  local oldCensus:=census;
  getListingToDelete(includeExe).agg((f)->log('Deleting ',f,deleteFile(f) ? ' o.k.' : ' FAILED'));
  local freed:=oldCensus-census;
  log( floor(freed[1]      ),"\tbytes in ",freed[0],' files freed',
  "\n",floor(freed[1]/1024 ),"\tkB",
  "\n",floor(freed[1]/1024²),"\tMB",
  "\n",floor(freed[1]/1024³),"\tGB");
end;

main->cleanup(false);
//*Cleanup, including exe files
main('deep')->cleanup(true);
//*List files that would be deleted
main(       'preview')->printf('%s',getListingToDelete(false));
//*List files that would be deleted in deep run
main('deep','preview')->printf('%s',getListingToDelete(true));

