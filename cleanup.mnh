USE startall;

census->begin
  local info:=allFiles('.').fileInfo;
  [info.size,info.getInner('size').agg(+)];
end;

main->begin
  local oldCensus:=census;

  deleteDir('backup');
  deleteDir('lib');
  files(['*.anim','*.log','*.exe','*.dump']).map(::deleteFile);


  local blocked:=runningGravTasks.map((n)->n.changeFileExt('')).relativeFileName.toSet;
  local unblockedFilter:=(f)->f.changeFileExt('').expandedFileName.relativeFileName not in blocked;

  local existing   :=allFiles('.','grav*.txt').union(allFiles('.','grav*.log'));
  existing
  .sort
  .filter(unblockedFilter)
  .map((f)->[f,f.fileInfo['size']])
  .agg((f)->log('Deleting ',f[0],deleteFile(f[0]) ? ' o.k.' : ' FAILED'));

  existing   :=union(allFiles('.','*.anim'),
                     allFiles('.','*.dump'),
                     allFiles('.','*.exe' )).filter((f)->f.changeFileExt('').relativeFileName not in blocked);
  local root:=expandedFileName('.');
  existing.map((f)->f.changeFileExt('.mnh').expandedFileName.systemSpecificFilename)
          .unique
          .filter(::fileExists)
          .each(f,changeDirectory(f.extractFileDirectory),
                  exec(executor,[f,'check']));
  changeDirectory(root);

  local
  recreatable:=intersect(allFiles('.','*.mnh').map((s)->s.changeFileExt('')),
                         allFiles('.','*.dat').map((s)->s.changeFileExt('')));
  existing
  .sort
  .filter((f)->f.changeFileExt('') in recreatable)
  .filter(unblockedFilter)
  .map((f)->[f,f.fileInfo['size']])
  .agg((f)->log('Deleting ',f[0],deleteFile(f[0]) ? ' o.k.' : ' FAILED'));

  local freed:=oldCensus-census;

  log( floor(freed[1]      ),"\tbytes in ",freed[0],' files freed',
  "\n",floor(freed[1]/1024 ),"\tkB",
  "\n",floor(freed[1]/1024²),"\tMB",
  "\n",floor(freed[1]/1024³),"\tGB");
end;
