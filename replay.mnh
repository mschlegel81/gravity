private allColors:=
[0..127].map((i)->[0,0,i])|
[126..0].map((i)->[127-i,0,i])|
[128..255].map((i)->[i,0,0])|
[0..255].map((i)->[255,i,0])|
[0..255].map((i)->[255,255,i]);
private colorMap:=allColors.each(c,c=>index).toMap;
private realColors:=allColors*(1/255);
private memoized colorIndex(Q:IntList(3))->colorMap[Q] orElse argMin(allColors.map((c)->euklideanNorm(c-Q)));

private scaleTo(colors:List,width,targetWidth)->begin
  local height      :=colors.size div width;
  local targetHeight:=round(height*(targetWidth/width));
//  local xMapping:=([0.. width-1]+0.5)*(targetWidth /width ); local newXValues:=0.5+[0..targetWidth -1];
//  local yMapping:=([0..height-1]+0.5)*(targetHeight/height); local newYValues:=0.5+[0..targetHeight-1];
//
//  local colorIndexes:=colors
//    .map(::colorIndex)
//    .chunkMap(width)
//    .map((row)->newBSpline([xMapping,row].transpose)(newXValues))
//    .toList.transpose
//    .map((column)->newBSpline([yMapping,column].transpose)(newYValues))
//    .transpose.flatten.round;
  local newXValues:=(0.5+[0..targetWidth -1])*width /targetWidth +0.5;
  local newYValues:=(0.5+[0..targetHeight-1])*height/targetHeight+0.5;

  local colorIndexes:=colors
    .map(::colorIndex)
    .chunkMap(width)
    .map((row)->newLocalInterpolator(row)(newXValues))
    .toList.transpose
    .map((column)->newLocalInterpolator(column)(newYValues))
    .transpose.flatten.round;

  colorIndexes:=colorIndexes * ord(0<=colorIndexes< allColors.size)
                             + ord(   colorIndexes>=allColors.size)*(allColors.size-1);
  realColors[colorIndexes];
end;


mutable workAllowed:=true;
ensureCancelTask->begin
  local taskWasStartedBefore:=false;
save;
  taskWasStartedBefore
  ? void
  : async({begin ask('You can cancel this operation',['Quit']); workAllowed:=false; end});
  taskWasStartedBefore:=true;
end;

replay(filename,scaledUp,export:Boolean)->fileExists(filename) AND workAllowed ? begin
  ensureCancelTask;
  print('Reading ',filename);
  local bytesRead:=0;
  local frames:=0;
  local lastBytesRead:=0;
  local lastFrames:=0;
  local lastOutputTime:=scriptTime;

  local doLog:=(suffix)->begin
    print('Reading @',round((frames   -lastFrames   )/(scriptTime-lastOutputTime),2),'fps / ',
                      round((bytesRead-lastBytesRead)/(scriptTime-lastOutputTime)/1024),'kbps; (',frames,'frames /',round(bytesRead/1024Â²),'MiB)',suffix);
  end;

  local index:=-1;
  local res:=filename.extractFileNameOnly.clean(['0'..'9'],'').softCast;
  assert(res in [32,64,128,256]);
  local hiRes:=res*4;
  local chunkSize:=res*res*3;

  byteStreamIterator(filename,chunkSize+8,export ? void : 60)
    .map((line)->[filename.changeFileExt(format('_%4.4d.png',index+=1)),begin bytesRead+=line.size; line; end])
    .filter((D)->!(export AND fileExists(D[0])))
    .{scaledUp
      ? $filtered.map((D)->[D[0],[chunkMap(D[1].head(chunkSize)        ,3).toList.scaleTo(res,hiRes),hiRes]])
      : $filtered.map((D)->[D[0],[chunkMap(D[1].head(chunkSize)*(1/255),3).toList                   ,res  ]])}
  .agg((d)->begin      //agg	@[MNH]:3,1	1	43059.349ms	4564.750ms
    setOptions(["axisStyleX"=>0,"axisStyleY"=>0].toMap);
    plot();
    plotRasterImage@(d[1]);
    frames+=1;
    export
    ? begin
        doLog(' '&d[0]);
        renderToFile(d[0],d[1,1],d[1,1],true);
      end
    : begin
        doLog('');
        addAnimationFrame;
        postDisplay;
      end;
    workAllowed
    ? void
    : halt;
  end);
  callMemoryCleaner;
  doLog(' - EOF');
end : void;

memoized replayableFiles->
  allFiles('.','grav*.anim').map((l)->begin
    local res:=l.extractFileNameOnly.clean(['0'..'9'],'').softCast;
    assert(res in [32,64,128,256]);
    local chunkSize:=res*res*3+8;
    [l,fileInfo(l)['size'] div chunkSize];
  end)
  .sort
  .map((k)->[k[0].expandedFileName.relativeFileName,k[1]]);

//*Replay with an ask dialog
main->begin
  assertGuiStarted;
  ask('Which file to replay?',replayableFiles.getInner(0)).replay(true,false);
end;

USE formattingUtils;
//*List files with respective line counts
main('list')->begin
  local f:=allFiles('.','*.png');
  f:=f.group(f.map((name)->name.copy(0,name.length-9)))
      .map((g)->[g[0].expandedFileName.relativeFileName.changeFileExt('.anim'),
                 g[1].trailing.extractFileNameOnly.split('_').trailing.softCast+1])
      .toMap;
  local r:=replayableFiles.toMap;
  local table:=[['File','anim','png']]|
                  union(f.getInner(0),r.getInner(0))
                .sort
                .each(key,[key,r[key] orElse '-',f[key] orElse '-']);
  printf('%s',table.formatTable);
end;

//*Create png graphics for given files (or for all if none are given)
main('png',...)->
  (size(...)=0
   ? replayableFiles.map((f)->f[1]=5000 ? f[0] : void)
   : files(...))
  .filter((f)->f.extractFileExt.lower=='.anim')
  .each(f,replay(f,false,true));

main('hiResPng',...)->
  (size(...)=0
   ? replayableFiles.map((f)->f[1]=5000 ? f[0] : void)
   : files(...))
  .filter((f)->f.extractFileExt.lower=='.anim')
  .each(f,replay(f,true,true));

//*Replay a specific file
main(filename)->begin
  assertGuiStarted;
  replay(filename,false,false);
end;

