USE cpuMonitor;

MAX_GRAV_INSTANCES:=12;
datastore occupiedIndexes:=[].toMap;

positionParameter(execName:String)->begin
  local i:=0;
  local running:=runningGravTasks;
  occupiedIndexes.getInner(0).minus(running).each(key,occupiedIndexes[key]:=void);
  local occupied:=occupiedIndexes.getInner(1);
  while(i in occupied,i+=1);

  occupiedIndexes[execName]:=i;

  'pos='&i;
end;

execute(execName:String,replay:Boolean)->
  execAsync(execName,[execName.matches('low_density') ? 'ld' :
                      execName.matches('high_density') ? 'hd' : void,
                      replay ? 'replay' : void,
                      positionParameter(execName)].{$L==[] ? void : $L});

synchronized gravExes->begin
  local result:=void;
  local resultTime:=-600;
save;
  scriptTime>resultTime+60
  ? begin
      result:=allFiles('.','grav*.exe').map(::expandedFileName).map(::systemSpecificFilename);
      resultTime:=scriptTime;
    end
  : void;
  result;
end;

memoized mnhFiles->allFiles('.','*.mnh').filter((f)->f.extractFileDirectory<>'.' AND f.matches('grav\d+\.mnh'));

private mutable runningGravTask__:=[-10];
private synchronized invalidateRunningGravTasks->runningGravTask__:=[-10];
synchronized runningGravTasks->begin
  scriptTime>runningGravTask__[0]+5
  ? begin
      runningGravTask__[1]:=getTaskInfo.map((i)->gravExes[!pos(gravExes,i['commandLine']).isInfinite][0]).toSet;
      runningGravTask__[0]:=scriptTime;
    end
  : void;
  runningGravTask__[1];
end;

mutable toClear:=0;
tPrint(...)->begin
  local out:=join([formatTime("hh:mm.ss",systime),' ']|...);
  out&=repeat(' ',toClear-out.length);
  print("\r",out);
  toClear:=0;
end;

tPrintD(...)->begin
  local lastPrinted:=void;
save;
  lastPrinted==... ? void : begin
    local out:=join([formatTime("hh:mm.ss",systime),' ']|...);
    out&=repeat(' ',toClear-(toClear:=out.length));
    printDirect("\r",out);
    lastPrinted:=...;
  end;
end;

BLOCKS:=[0..100].map((l)->[" ","▁","▂","▃","▄","▅","▆","▇","█"][floor(l*9/101)])|'!';

SKIP:='skip';
FORCE:='force';
QUIT:='quit';

exeSorting(L:StringCollection)->L.map((n)->n.extractFileNameOnly.clean(['0'..'9'],'').softCast=>n).sort(1).sort(0).getInner(1);

start(replay:Boolean)->begin
  assertUniqueInstance;
  local CPU_threshold:=replay ? 85 : 50;
  local firstQuestion:=true;
  local userSignal:='';
  localAsync({while(true,begin
    userSignal:=ask('Next element in queue...',[SKIP,FORCE,QUIT],firstQuestion);
    firstQuestion:=false;
  end)});

  local lastStartedAt:=scriptTime;
  local startedCount:=0;
  gravExes
  .exeSorting
  .each(execName,!fileExists(execName)        ? tPrint('          ',execName.relativeFileName,' has been deleted') :
                 execName in runningGravTasks ? tPrint('          ',execName.relativeFileName,' is already running')
                 : begin
                     userSignal:=userSignal==QUIT ? QUIT : '';
                     local load:=getCpuLoadHistory(32);
                     while(((load.size<16 OR max(load-[load.size-1..0])>=CPU_threshold) OR
                            (runningGravTasks.size>=MAX_GRAV_INSTANCES) OR
                            (scriptTime<lastStartedAt+1)) AND (userSignal=='') ,begin
                       tPrintD('Next:     ',execName.relativeFileName,"; CPU: ",BLOCKS[load].join,load.trailing,'%');
                       load:=getCpuLoadHistory(32);
                       sleep(0.1);
                     end);
                     userSignal in [SKIP,QUIT]
                     ? tPrint('Skipping: ',execName.relativeFileName)
                     : begin
                         userSignal==FORCE
                         ? tPrint('Forced:   ',execName.relativeFileName)
                         : tPrint('Starting: ',execName.relativeFileName);
                         execute(execName,replay);
                         lastStartedAt:=scriptTime;
                         startedCount+=1;
                         invalidateRunningGravTasks;
                       end;
                   end);
  tPrint(startedCount,' tasks started');
  tPrint(runningGravTasks.size,' tasks are running: ',join("\n  "&sort(runningGravTasks)));
end;

//*Start in calculation mode
main->start(false);

//*Start in replay mode
main('r')->start(true);

//*Decompress all compressed files
main('d')->mnhFiles.pEach(script,begin
  print('Starting ',script);
  assert(exec(executor,[script])[1]==0,'Script ',script,' failed');
  print(script,' executed successfully');
end);

//*Decompress compressed files matching pattern
main('d',pattern)->mnhFiles.filter((script)->script.matches(pattern)).pEach(script,begin
  print('Starting ',script);
  assert(exec(executor,[script])[1]==0,'Script ',script,' failed');
  print(script,' executed successfully');
end);

//*List executables (exe) and compressed executables (mnh)
main('list')->begin
  local f:=(gravExes | mnhFiles).expandedFileName.relativeFileName;
  f:=[f.extractFileDirectory,f.extractFileName].transpose;
  local allNames      :=f.getInner(1).unique;

  f.getInner(0).unique.each(dir,join([dir,': ']|allNames.map((n)->[dir,n] in f ? n : ''),"\t"))
   .join("\n").print;
end;

watcher(filename:String)->{begin
  local timedOut:=true;
  local trailSize:=100;
  local trail:=[];
  local reinitialize:=()->begin
    timedOut:=false;
    trail:=[];
    localAsync({begin
      local it:=fileLineIterator(filename,60);
      local n:=void;
      while(!isVoid(n:=it()),begin
        trail:=trailing(trail|("\t"&n),trailSize);
      end);
      trail|=("\t"&'...timed out');
      timedOut:=true;
    end});
  end;
save;
  timedOut ? reinitialize() : void;
  trailSize:=max(1,$trailSize);
  trail.size>trailSize
  ? trail.trailing(trailSize)
  : trail;
end};

//*Watch all log files
main('w')->begin
  local killSignal:=false;
  local linesTotal:=1;
  local cpuWidth:=32;

  localAsync({begin local answer:=''; while(answer!=QUIT,begin
    answer:=ask('?',[QUIT,'+','-'],false);
    answer=='+' ? printDirect("\rLines: ",linesTotal+=1,'  ') :
    answer=='-' ? printDirect("\rLines: ",linesTotal:=max(1,linesTotal-1),'  ') :
    answer==QUIT ? killSignal:=true : void;
  end); end});
  local logs:=runningGravTasks
    .exeSorting
    .filter((e)->e.changeFileExt('.log').fileExists)
    .map((e)->begin
       local key:=e.relativeFileName.changeFileExt('');
       [key,watcher(e.changeFileExt('.log')),['-']];
     end);

  sleep(1);

  local nextScanForNewTasks:=scriptTime+10;
  local sleepTime:=0;
  while(!killSignal,begin
    local anyChanged:=false;
    scriptTime>=nextScanForNewTasks
    ? begin
        local currentRunning:=runningGravTasks.exeSorting.filter((e)->e.changeFileExt('.log').fileExists);
        currentRunning.map((e)->e.relativeFileName.changeFileExt('')).sort == logs.getInner(0).sort
        ? void
        : begin
            local previousEntries:=logs.map((l)->l[0]=>l).toMap;
            logs:=currentRunning
                  .map((e)->begin
                     local key:=e.relativeFileName.changeFileExt('');
                     previousEntries[key] orElse [key,watcher(e.changeFileExt('.log')),['']];
                   end);
            anyChanged:=true;
          end;
        nextScanForNewTasks:=scriptTime+10;
      end
    : void;

    logs:=logs.each(e,
      begin
        (local n:=e[1](linesTotal))==e[2]
        ? e
        : begin
            anyChanged:=true;
            [e[0],e[1],n];
          end;
      end);

    anyChanged
    ? begin
        local out:=logs.map((l)->[l[0],l[2]==[] ? [''] : l[2]]);
        out.size==0 ? void : begin
          local includeEta:=linesTotal>=3*out.size;


          local lines:=out.getInner(1).map((L)->max(1+ord(includeEta),L.size)).agg(+);

          local eta:=
          includeEta
          ? out.getInner(1).each(L,begin
              local remainingDays:=1/(24*60*60)*
              (4999-L.matchComposite('Step \d+ done'  ).getInner(0).trailing[0].orElse('0').clean(['0'..'9'    ],'').softCast)
                  *(L.matchComposite('done: \d+.\d+s;').getInner(0).getInner(0)            .clean(['0'..'9','.'],'').softCast.{$L.agg(+)/$L.size});

              remainingDays<1
              ? format("eta %s",formatTime('hh:mm:ss',remainingDays))
              : format("eta %s + %sdays",formatTime('hh:mm:ss',remainingDays-floor(remainingDays)),floor(remainingDays));
            end)
         : void;

          while(lines>max(linesTotal,out.size),begin
            local k:=argMax(out.getInner(1).map(::size));
            out[k]:=begin
                      lines-=1;
                      [out[k,0],out[k,1].tail];
                    end;
          end);



          cpuWidth:=1+out.getInner(0)        .map(::length).max
                     +out.getInner(1).flatten.map(::length).max
                   -9;
          includeEta
          ? out:=out.each(o,o[0]&o[1].head,eta[index]&(o[1,1]),o[1].tail(2),|)
          : out:=out.each(o,o[0]&o[1].head,o[1].tail,|);
        end;
        while(out.size<linesTotal,out|="\t...");
        clearPrint;
        printf('%s',out);
      end
    : void;
    printDirect("\rCPU ",BLOCKS[getCpuLoadHistory(cpuWidth)].join,getCpuLoadHistory.orElse(['?']).trailing,'% ');

    anyChanged ? sleepTime:=0.2 : sleep(sleepTime:=1-(1-sleepTime)*0.9);
  end);
end;
