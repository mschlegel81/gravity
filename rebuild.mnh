#!C:\bin\mnh_light.exe -v1 -stdout
LAZ_BUILD:='..\lazarus64\lazbuild.exe';
LPI:='gravity.lpi';
MODES:=['--bm=opt32' =>'grav032.exe',
        '--bm=opt64' =>'grav064.exe',
        '--bm=opt128'=>'grav128.exe',
        '--bm=opt256'=>'grav256.exe'];

softFail(...)->begin
  warn@...;
  beep;
end;

exeIsMissing(name:String)->
  fileExists(name)
  ? false
  : name.changeFileExt('.dump').fileExists
    ? true
    : name.changeFileExt('.replay').fileExists
      ? false
      : true;

//*Returns a list of entries: [customization file, build flag, build output, target location]
memoized buildableExe->
  allFiles('','customization.pas')
  .filter((e)->e.extractFileDirectory not in ['.','.\backup','./backup'])
  .cross(MODES,['_high_density/','_low_density/','_ultra_density/'])
  .map(::flatten)
  .map((customizationFile,buildMode,targetExe,targetPathPart)->
       [customizationFile,buildMode,targetExe,expandedFileName(split(customizationFile.extractFileDirectory,'_')[0]&targetPathPart&targetExe)]);

executeBuild(customizationFile,buildMode,targetExe,copyTargets)->begin
  print('Building ',customizationFile,' with mode ',buildMode);
  copyFile(customizationFile,'customization.pas').assert;
  buildOut:=exec(LAZ_BUILD,[LPI,buildMode]);
  buildOut[1]==0
  ? copyTargets.map((target)->begin
      printf('%s -> %s',targetExe,target);
      copyFile(targetExe,target) ? void : softFail('Copy failed for: ',targetExe,' -> ',target);
    end)
  : softFail('Build failed for mode ',buildMode," with:\n",buildOut[0].join("\n"));
end;

ensureExe(path:String)->begin
  fileExists(path) ? return void :
  buildable:=buildableExe;
  k:=indexOf(buildable.getInner(3)=path)[0] orElse return warn('No build configuration found for ',path);
  targets:=buildable.filter((b)->b[0]==buildable[k,0] AND b[1]==buildable[k,1] AND exeIsMissing(buildable[k,3])).getInner(3);
  executeBuild(buildable[k,0],buildable[k,1],buildable[k,2],targets);
end;

rebuild(missingOnly:Boolean,prefix)->
  buildableExe
  .filter((customizationFile,buildMode,targetExe,targetPath)->targetPath.matches(prefix) AND (!missingOnly OR exeIsMissing(targetPath)))
  .group(0)
  .map((key,value)-> value.getInner(3).group(value.map((customizationFile,buildMode,targetExe,targetPath)->[customizationFile,buildMode,targetExe])))
  .agg(|)
  .map((key,value)->key|[value])
  .sort
  .map((customizationFile,buildMode,targetExe,copyTargets)->begin
    print('Building ',customizationFile,' with mode ',buildMode);
    copyFile(customizationFile,'customization.pas').assert;
    buildOut:=exec(LAZ_BUILD,[LPI,buildMode]);
    buildOut[1]==0
    ? copyTargets.map((target)->begin
        printf('%s -> %s',targetExe,target);
        copyFile(targetExe,target) ? void : softFail('Copy failed for: ',targetExe,' -> ',target);
      end)
    : softFail('Build failed for mode ',buildMode," with:\n",buildOut[0].join("\n"));
   end)
  .toList;

//*(Re)build all
main->rebuild(false,'.');
//*Build missing
main('missing')->rebuild(true,'.');
//*Build all matching a given prefix (regex)
main(prefix)->rebuild(false,prefix);
//*Build all missing matching a given prefix (regex)
main('missing',prefix)->rebuild(true,&prefix);
