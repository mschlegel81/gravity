#!C:\bin\mnh_light.exe -quiet -convertPrintToLog -logDateFmt hh:mm:ss -logLocationLength 14 +log stdOut(2)
USE startall;

datastore SEVEN_ZIP_PATH:=void;

@SuppressUnusedWarning
ensure7zp:=SEVEN_ZIP_PATH.isVoid OR !fileExists(SEVEN_ZIP_PATH)
? SEVEN_ZIP_PATH:=begin
    log("Paths of 7z.exe is not set.\nThis may take a while...");
    local all:=allFiles(folders('C:\*prog*')|getEnv['USERPROFILE'],'7z.exe');
    all.sort((x,y)->x.length<=y.length).head;
  end
: void;

mutable workAllowed:=true;

@SuppressUnusedWarning
cancelTask:=async({begin ask('',['Quit'],false); workAllowed:=false; end});

blocked->begin
  local scanInterval:=30;
  local lastQuery:=scriptTime-scanInterval;
  local lastResponse:=[];
save;
  scriptTime+scanInterval>lastQuery
  ? begin
      lastResponse:=runningGravTasks.map((n)->n.changeFileExt('')).relativeFileName.toSet;
      lastQuery:=scriptTime;
    end
  : void;
  lastResponse;
end;

mutable alreadyExamined:=[].toSet;

compressSet(s)->workAllowed AND s not in alreadyExamined AND begin
  alreadyExamined|=s;
  local set:=files(['.anim','.exe','.dump'].map((e)->s.changeFileExt(e))).sort;
  local targetMnh:=s.changeFileExt('.mnh');
  local targetZip:=s.changeFileExt('.dat');
  set.size==3                                               ? void : return note('Set ',s,' is incomplete') orElse false;
  (!fileExists(targetZip) OR !fileExists(targetMnh))        ? void : return note('Set ',s,' is already compressed') orElse false;
  (set[2].expandedFileName.relativeFileName not in blocked) ? void : return note('Set ',s,' is blocked') orElse false;
  deleteFile(targetZip);
 // log('Writing ',targetZip);

  assert(exec(SEVEN_ZIP_PATH,['u','-mx5','-mmt2','-sfx',targetZip]|set)[1]==0,'Failed for set: ',s);
 // log('Writing ',targetMnh);
  local linesToWrite:=[
     'main("check")->fileInfo('+set[0].extractFileName.escape+')["size"]>'&fileInfo(set[0])['size']&' OR !fileExists(myPath.changeFileExt(".dat")) ? begin deleteFile(myPath.changeFileExt(".dat")); deleteFile(myPath); end : void;',
     'main->'&set.each(n,format('fileExists(%s)',n.extractFileName.escape)).join(' AND ')&' ? main("check") : begin changeDirectory(myPath.extractFileDirectory); execPipeless(myPath.changeFileExt(".dat")); end;'];
  writeFileLines(targetMnh,linesToWrite);
  log('Done (set: ',s,')');
  true;
end;

main(firstPattern,...)->begin
  files(firstPattern|...)
    .flatten
    .map((f)->f.expandedFileName.changeFileExt(''))
    .unique
    .each(f,compressSet(f));
  log('Finished');
end;

main->begin
  assertUniqueInstance;
  while(allFiles('.','*.log').filter((f)->f.fileStats[0]>=4999).map((f)->f.changeFileExt('')).unique.pEach(f,compressSet(f),OR));
  log('Finished');
end;
