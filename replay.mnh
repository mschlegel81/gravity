mutable workAllowed:=true;

memoized ensureCancelTask->async({begin ask('You can cancel this operation',['Quit'],false); workAllowed:=false; end});

replay(filename,export:Boolean)->fileExists(filename) AND workAllowed ? begin
  ensureCancelTask;
  print('Reading ',filename);
  local bytesRead:=0;
  local frames:=0;
  local lastBytesRead:=0;
  local lastFrames:=0;
  local lastOutputTime:=scriptTime;

  local doLog:=(suffix)->begin
    print('Reading @',round((frames   -lastFrames   )/(scriptTime-lastOutputTime)),'fps / ',
                      round((bytesRead-lastBytesRead)/(scriptTime-lastOutputTime)/1024),'kbps; (',frames,'frames /',round(bytesRead/1024Â²),'MiB)',suffix);
  end;

  local index:=-1;
  local res:=filename.extractFileNameOnly.clean(['0'..'9'],'').softCast;
  assert(res in [32,64,128,256]);
  local chunkSize:=res*res*3;


  (filename.extractFileExt.lower='.txt'
  ? fileLineIterator(filename)
    .map((line)->[filename.changeFileExt(format('_%4.4d.png',index+=1)),begin bytesRead+=line.byteLength; line; end])
    .map((D)->export AND fileExists(D[0])
              ? void
              : begin
                  local data:=try(::interpret,[D[1]]);
                  data.isVoid ? void : [D[0],[data[1]*(1/255),data[0]]];
                end)
  : byteStreamIterator(filename,chunkSize+8)
    .map((line)->[filename.changeFileExt(format('_%4.4d.png',index+=1)),begin bytesRead+=line.size; line; end])
    .map((D)->export AND fileExists(D[0])
              ? void
              : [D[0],[chunkMap(D[1].head(chunkSize)*(1/255),3).toList,res]]))
  .agg((d)->begin      //agg	@[MNH]:3,1	1	43059.349ms	4564.750ms
    workAllowed
    ? plotRasterImage@(d[1])
    : halt;
    export
    ? begin
        doLog(' '&d[0]);
        renderToFile(d[0],d[1,1],d[1,1],true);
      end
    : begin
        doLog('');
        addAnimationFrame;
        postDisplay;
      end;
    frames+=1;
  end);
  callMemoryCleaner;
  doLog(' - EOF');
end : void;

memoized replayableFiles->
  allFiles('.','grav*.anim').map((l)->begin
    local res:=l.extractFileNameOnly.clean(['0'..'9'],'').softCast;
    assert(res in [32,64,128,256]);
    local chunkSize:=res*res*3+8;
    [l,fileInfo(l)['size'] div chunkSize];
  end)
  .sort
  .map((k)->[k[0].expandedFileName.relativeFileName,k[1]]);

//*Replay with an ask dialog
main->begin
  assertGuiStarted;
  ask('Which file to replay?',replayableFiles.getInner(0)).replay(false);
end;

USE formattingUtils;
//*List files with respective line counts
main('list')->begin
  local f:=allFiles('.','*.png');
  f:=f.group(f.map((name)->name.copy(0,name.length-9)))
      .map((g)->[g[0].expandedFileName.relativeFileName.changeFileExt('.anim'),
                 g[1].trailing.extractFileNameOnly.split('_').trailing.softCast+1])
      .toMap;
  local r:=replayableFiles.toMap;
  local table:=[['File','anim','png']]|
                  union(f.getInner(0),r.getInner(0))
                .sort
                .each(key,[key,r[key] orElse '-',f[key] orElse '-']);
  printf('%s',table.formatTable);
end;

//*Create png graphics for given files (or for all if none are given)
main('png',...)->
  (size(...)=0
   ? replayableFiles.map((f)->f[1]=5000 ? f[0] : void)
   : files(...))
  .filter((f)->f.extractFileExt.lower=='.anim')
  .each(f,try(::replay,[f,true],::warn));

//*Replay a specific file
main(filename)->begin
  assertGuiStarted;
  replay(filename,false);
end;

