replay(filename,export:Boolean)->begin
  log('Reading ',filename);
  local bytesRead:=0;
  local frames:=0;
  local lastBytesRead:=0;
  local lastFrames:=0;
  local lastOutputTime:=0;

  local doLog:=(suffix)->begin
    log('Reading @',round((frames   -lastFrames   )/(scriptTime-lastOutputTime)),'fps / ',
                    round((bytesRead-lastBytesRead)/(scriptTime-lastOutputTime)/1024),'kbps; (',frames,'frames /',round(bytesRead/1024Â²),'MiB)',suffix);
    lastOutputTime:=scriptTime;
    lastFrames:=frames;
    lastBytesRead:=bytesRead;
  end;

  local index:=-1;

  fileLineIterator(filename)
  .map((line)->[filename.changeFileExt(format('_%4.4d.png',index+=1)),line.byteLength,line])
  .pMap((D)->export AND fileExists(D[0]) ? void : begin
     local data:=try(::interpret,[D[2]]);
     data.isVoid ? void : [D[0],D[1],[data[1]*(1/255),data[0]]];
   end)
  .agg((d)->begin
    export
    ? begin
        plotRasterImage@(d[2]);
        log('Writing ',d[0]);
        renderToFile(d[0],d[2,1],d[2,1],true);
      end
    : begin
        plotRasterImage@(d[2]);
        addAnimationFrame;
        postDisplay;
      end;
    frames+=1;
    bytesRead+=d[1];
    scriptTime>lastOutputTime+1
    ? doLog('')
    : void;
  end);
  callMemoryCleaner;
  doLog(' - EOF');
end;

//*Replay with an ask dialog
main->begin
  assertGuiStarted;
  ask('Which file to replay?',allFiles('.','grav*.txt').map((n)->relativeFileName(myPath,n).systemSpecificFilename)).replay(false);
end;

//*List files with respective line counts
main('list')->
allFiles('.','grav*.txt').pMap((l)->begin
  local k:=0;
  fileLineIterator(l).each(l,k+=1).trailing;
  join([replace('#'&l,'#./',''),k],"\t");
end).join("\n").print;

//*Replay a specific file
main(filename)->begin
  assertGuiStarted;
  replay(filename,false);
end;

//*Create png graphics for given files
main('png',filename,...)->
  files(filename|...).filter((f)->f.extractFileExt.lower=='.txt').each(f,replay(f,true));
